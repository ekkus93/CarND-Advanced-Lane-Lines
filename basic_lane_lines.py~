def canny(img, low_threshold, high_threshold):
    """Applies the Canny transform"""
    return cv2.Canny(img, low_threshold, high_threshold)

def gaussian_blur(img, kernel_size):
    """Applies a Gaussian Noise kernel"""
    return cv2.GaussianBlur(img, (kernel_size, kernel_size), 0)

def region_of_interest(img, vertices):
    """
    Applies an image mask.
    
    Only keeps the region of the image defined by the polygon
    formed from `vertices`. The rest of the image is set to black.
    """
    #defining a blank mask to start with
    mask = np.zeros_like(img)   
    
    #defining a 3 channel or 1 channel color to fill the mask with depending on the input image
    if len(img.shape) > 2:
        channel_count = img.shape[2]  # i.e. 3 or 4 depending on your image
        ignore_mask_color = (255,) * channel_count
    else:
        ignore_mask_color = 255
        
    #filling pixels inside the polygon defined by "vertices" with the fill color    
    cv2.fillPoly(mask, vertices, ignore_mask_color)
    
    #returning the image only where mask pixels are nonzero
    masked_image = cv2.bitwise_and(img, mask)
    return masked_image

def crop_roi(img):
    """
    Crops region of interest for an image.  The cropped region is a preset trapezoidal shape
    based on the dimensions of the image.
    
    Parameters
    ----------
    img : numpy image array
        grayscale image

    Returns
    -------
    numpy image array
        cropped image based on img
    """
    bottom_y = img.shape[0]
    top_y = int(0.6*img.shape[0])
    top_left_x = int(0.45*img.shape[1])
    top_right_x = int(0.55*img.shape[1])
    bottom_left_x = int(0.1*img.shape[1])
    bottom_right_x = int(0.9*img.shape[1])

    pt0 = [bottom_left_x, bottom_y]
    pt1 = [top_left_x, top_y]
    pt2 = [top_right_x, top_y]
    pt3 = [bottom_right_x, bottom_y]
    
    bounding_box = np.array([pt0, pt1, pt2, pt3], np.int32)
    
    cropped_img = region_of_interest(img, [bounding_box])   
    
    return cropped_img

def weighted_img(img, initial_img, α=0.8, β=1., λ=0.):
    """
    `img` is the output of the hough_lines(), An image with lines drawn on it.
    Should be a blank image (all black) with lines drawn on it.
    
    `initial_img` should be the image before any processing.
    
    The result image is computed as follows:
    
    initial_img * α + img * β + λ
    NOTE: initial_img and img must be the same shape!
    """
    return cv2.addWeighted(initial_img, α, img, β, λ)

class Line(object):
    """
    Represents a line
    """
    def __init__(self, x1,y1,x2,y2):
        """
        Constructor for Line
        
        Parameters
        ----------
        x1, y1: int, int
            x,y of first point
        x2, y2: int, int
            x,y of second point
        """
        self.x1,self.y1,self.x2,self.y2 = x1,y1,x2,y2
        self._m = None
        self._b = None
        
    @property
    def m(self):
        """
        Slope of the line
        
        Returns
        -------
        float
            (y2-y1)/(x2-x1)
        """
        if self._m is None:
            if self.x2-self.x1 == 0:
                self._m = 0.0
            else:
                self._m = float(self.y2-self.y1)/float(self.x2-self.x1)
            
        return self._m
    
    @property
    def b(self):
        """
        x-intercept
        
        Returns
        -------
        float
            y1 - m*x1
        """
        if self._b is None:
            self._b = self.y1 - self.m*self.x1
            
        return self._b
    
    def find_x(self, y):
        """
        Based on y, find x.
        
        Parameters
        ----------
        y: int
            y coordinate
            
        Returns
        -------
        float
            corresponding x value
        """
        return (y-self.b)/self.m
    
    def find_y(self, x):
        """
        Based on x, find y.
        
        Parameters
        ----------
        x: int
            x coordinate
            
        Returns
        -------
        float
            corresponding y value
        """        
        return self.m*x + self.b

class LineCollection(object):
    """
    A collection of Lines.
    """
    def __init__(self, line_objs=[]):
        self.line_objs = line_objs
        self._mean_m = None
        self._mean_b = None
        self._top_y = None
        self._bottom_y = None
        
    @property
    def length(self):
        """
        Get number of lines.
        
        Returns
        -------
        int
            number of lines
        """
        return len(self.line_objs)
        
    @property
    def mean_m(self):
        """
        Get the mean slope of all lines.
        
        Returns
        -------
        float
            mean slope
        """
        if self._mean_m is None:
            if self.length == 0:
                self._mean_m = 0.0
            else:
                self._mean_m = float(np.mean([lo.m for lo in self.line_objs]))
            
        return self._mean_m
    
    @property
    def mean_b(self):
        """
        Get the mean x-intercept of all lines.
        
        Returns
        -------
        float
            mean x-intercept
        """
        if self._mean_b is None:
            if self.length == 0:
                self._mean_b = 0.0
            else:
                self._mean_b = float(np.mean([lo.b for lo in self.line_objs]))
            
        return self._mean_b
    
    @property
    def top_y(self):
        if self._top_y is None:
            min_y = None
        
            for line_obj in self.line_objs:
                if min_y is None or line_obj.y1 < min_y:
                    min_y = line_obj.y1
                    
                if min_y is None or line_obj.y2 < min_y:
                    min_y = line_obj.y2
            
            self._min_y = int(min_y)
            
        return self._top_y
    
    @property
    def bottom_y(self):
        """
        Find the bottom (furthest down) y value out of all lines.
        
        Returns
        -------
        int
            bottom y value
        """
        if self._bottom_y is None:
            max_y = 0
        
            for line_obj in self.line_objs:
                if line_obj.y1 > max_y:
                    max_y = line_obj.y1
                    
                if line_obj.y2 > max_y:
                    max_y = line_obj.y2
                
            self._bottom_y =  int(max_y)
            
        return self._bottom_y
    
    @property
    def top_y(self):
        """
        Find the top (furthest up) y value out of all lines.
        
        Returns
        -------
        int
            top y value
        """        
        if self._top_y is None:
            min_y = None
        
            for line_obj in self.line_objs:
                if min_y is None or line_obj.y1 < min_y:
                    min_y = line_obj.y1
                    
                if min_y is None or line_obj.y2 < min_y:
                    min_y = line_obj.y2
                
            if min_y is None:
                self._top_y = None
            else:
                self._top_y = int(min_y)
            
        return self._top_y
    
    def get_x(self, y):
        """
        Get x value based on the mean of the slope and x-intercept.
        
        Returns
        -------
        int
            x value
        """
        if self.mean_m == 0.0:
            return 0
       
        return int((y - self.mean_b)/self.mean_m)

    def get_mean_line_pts(self, bottom_y):
        """
        Get points for the mean line.  Extend the line to bottom_y.
        
        Parameters
        ----------
        bottom_y: int
            The bottom y for the line.
            
        Returns
        -------
        int, int, int, int
            Points for the line
        """
        if self.top_y is None:
            top_y = bottom_y
        else:
            top_y = self.top_y 
            
        top_x = self.get_x(top_y)
            
        bottom_x = self.get_x(bottom_y)
        return (top_x, top_y, bottom_x, bottom_y)

def find_lane3(image):
    """
    Like find_lane() but uses hough_lines3() instead of hough_lines().
    
    Parameters
    ----------
    image: numpy image array
        image of road
        
    Returns
    -------
    numpy image array
        image with black background with lane lines
    """    
    gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)

    # Define a kernel size and apply Gaussian smoothing
    kernel_size = 5
    blur_gray = gaussian_blur(gray, kernel_size)

    # Define our parameters for Canny and apply
    low_threshold = 50
    high_threshold = 150
    edges = canny(blur_gray, low_threshold, high_threshold)

    masked_edges = crop_roi(edges)

    # Define the Hough transform parameters
    # Make a blank the same size as our image to draw on
    rho = 1 # distance resolution in pixels of the Hough grid
    theta = np.pi/180 # angular resolution in radians of the Hough grid
    threshold = 64    # minimum number of votes (intersections in Hough grid cell)
    
    min_line_length = 5 #minimum number of pixels making up a line
    max_line_gap = 100    # maximum gap in pixels between connectable line segments
    line_image = np.copy(image)*0 # creating a blank to draw lines on

    # Run Hough on edge detected image
    color_edges = hough_lines3(masked_edges, rho, theta, threshold, min_line_length, max_line_gap)
    
    # Draw the lines on the edge image
    lines_edges = cv2.addWeighted(color_edges, 0.8, line_image, 1, 0)   

    return lines_edges 

def draw_lines3(img, lines, color=[255, 0, 0], thickness=2):
    """
    Draw lines on original image.  The lines will be separated by left and right lines.
    Horizontal lines will be filtered out. The means of the left and right lines will 
    be used to draw the lines on the original image.
    
    Parameters
    ----------
    img: numpy image array
        original image
    lines: list of (x1,y1,x2,y2)
        list of line points
    color: array of int
        RGB values for drawn lines
    thickness: int
        thickness of the drawn lines
    """    
    line_objs = []
    for line in lines:
        for x1,y1,x2,y2 in line:
            curr_line_obj = Line(x1,y1,x2,y2)
            line_objs.append(curr_line_obj)
    
    left_line_objs = []
    right_line_objs = []
    for line_obj in line_objs:
        if abs(line_obj.m) > 0.5:
            if line_obj.m > 0.0:
                left_line_objs.append(line_obj)
            else:
                right_line_objs.append(line_obj)
            
    left_line_list = LineCollection(left_line_objs)
    right_line_list = LineCollection(right_line_objs)
    
    bottom_y = img.shape[0]
    
    mean_lines = [left_line_list.get_mean_line_pts(bottom_y), 
                  right_line_list.get_mean_line_pts(bottom_y)]

    for x1,y1,x2,y2 in mean_lines:
        cv2.line(img, (x1, y1), (x2,y2), color, thickness)

def hough_lines3(img, rho, theta, threshold, min_line_len, max_line_gap):
    """
    `img` should be the output of a Canny transform.
        
    Returns an image with hough lines drawn.
    """
    lines = cv2.HoughLinesP(img, rho, theta, threshold, np.array([]), minLineLength=min_line_len, maxLineGap=max_line_gap)
    line_img = np.zeros((img.shape[0], img.shape[1], 3), dtype=np.uint8)
    draw_lines3(line_img, lines, thickness=8)
    return line_img


